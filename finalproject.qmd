---
title: "Analyzing a Relationship Between NYC's Tree Census and Air Quality"
author: "Sara Van Valkenburgh and Jennifer Edouard" 
date: "December 5, 2024"
format: 
    html: 
        code-overflow: wrap
execute:
  eval: true
  echo: true
  warning: false
---

## Importing Packages

```{python}
import altair as alt
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
from bs4 import BeautifulSoup
from shiny import ui
```

## Reading in the Data and Data Wrangling

```{python}
trees05 = pd.read_csv("data/2005_trees.csv")
trees15 = pd.read_csv("data/2015_trees.csv")
air_quality = pd.read_csv("data/air_quality.csv")

# Grouping the tree counts by neighborhood
trees05_grouped = trees05.groupby("nta").size().reset_index(name="tree_count")
trees05_grouped.to_csv("data/trees05_grouped.csv", index=False)

trees15_grouped = trees15.groupby("nta").size().reset_index(name="tree_count")
trees15_grouped.to_csv("data/trees15_grouped.csv", index=False)

# Taking only the air quality data from the 2000s and 2010s
air_quality["Start_Date"] = pd.to_datetime(air_quality["Start_Date"])
air_quality["Year"] = air_quality["Start_Date"].dt.year
air_quality = air_quality[(air_quality["Year"] >= 2000) & (air_quality["Year"] <= 2019)]

# Filtering the air quality data to only contain the observations that use NO2 as their air quality measurement
filtered_air_quality_only_NO2 = air_quality[
    air_quality["Name"] == "Nitrogen dioxide (NO2)"
]
```

```{python}
# Add a year column to each DataFrame
trees05['year'] = 2005
trees15['year'] = 2015

#  Check data type and rename the 5 rows to Staten Island to match the 2015 data
trees05['borough'] = trees05['borough'].astype(str)
trees05.loc[trees05['borough'] == '5', 'borough'] = 'Staten Island'

# Merge the datasets
merged_trees = pd.concat([trees05, trees15], ignore_index=True)
```

```{python}
# Group by neighborhood
trees_grouped = merged_trees.groupby(["nta", "nta_name", "year"]).size().reset_index(name="tree_count")

# Pivot the data
trees_grouped = (
    trees_grouped.pivot(index=["nta", "nta_name"], columns="year", values="tree_count")
    .reset_index()
)
trees_grouped["trees_diff"] = trees_grouped[2015] - trees_grouped[2005]

trees_grouped = trees_grouped.rename(columns={"nta": "NTACode"})

trees_grouped.to_csv("final-app/trees_grouped.csv", index=False)
```

# Static Plots

## Choropleth of tree density per NTA in 2005 and 2015 (Sara)

### 2005
```{python}
# Load the nta .shp file
nyc_shp = gpd.read_file("data/shapefiles/nynta.shp")

# Plot to see what the data looks like
nyc_shp.plot()
```

```{python}
# make sure column names match for merge
trees05_grouped = trees05_grouped.rename(columns={"nta": "NTACode"})
```

```{python}
# make 2005 choropleth
# merge data frames together
merged_05_map = nyc_shp.merge(trees05_grouped, how='left', on='NTACode' )
```

```{python}
# create the choropleth
merged_05_map.plot(column='tree_count', cmap='Greens',
                linewidth=0.1, edgecolor='0.8', legend=True)
plt.title("Number of Trees by Neighborhood in New York City - 2005 Tree Census", fontsize=15)
plt.axis("off")
```


### 2015
```{python}
# make sure column names match for merge
trees15_grouped = trees15_grouped.rename(columns={"nta": "NTACode"})
```

```{python}
# make 2015 choropleth
# merge data frames together
merged_15_map = nyc_shp.merge(trees15_grouped, how='left', on='NTACode' )
```

```{python}
# create the choropleth
merged_15_map.plot(column='tree_count', cmap='Greens',
                linewidth=0.1, edgecolor='0.8', legend=True)
plt.title("Number of Trees by Neighborhood in New York City - 2015 Tree Census", fontsize=15)
plt.axis("off")
```


### Plot showing difference in tree count between 2005 and 2015
```{python}
# merge 2005 and 2015 data frames by NTA
trees_planted = pd.merge(trees05_grouped, trees15_grouped, on='NTACode', suffixes=('_2005', '_2015'))

# calculate the number of trees planted between 2005 and 2015
trees_planted['trees_planted'] = trees_planted['tree_count_2015'] - trees_planted['tree_count_2005']

# save as csv
# trees_planted.to_csv("final-app/trees_planted.csv", index=False)
```

```{python}
# merge the NTA boundary shapefile with the tree planting data
trees_planted_map = nyc_shp.merge(trees_planted, how='left', on='NTACode')
```

```{python}
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

cmap = mcolors.LinearSegmentedColormap.from_list(
    'custom_cmap', ['red', 'white', 'green'])

# Set normalization so that 0 is the neutral point
norm = mcolors.TwoSlopeNorm(vmin=trees_planted_map['trees_planted'].min(), 
                            vcenter=0, vmax=trees_planted_map['trees_planted'].max())

# Plot the choropleth map with the custom color map
trees_planted_map.plot(column='trees_planted', cmap=cmap, norm=norm,
                       linewidth=0.2, edgecolor='0.8', legend=True)

# Add a title and other plot settings
plt.title("Difference in Tree Count from 2005 to 2015 by Neighborhood", fontsize=15)
plt.axis("off")
plt.show()
```

### Choropleth of tree density per Borough in 2005 and 2015

```{python}
# Group by borough
trees_grouped_borough = merged_trees.groupby(["borough", "year"]).size().reset_index(name="tree_count")

# Pivot the data
trees_grouped_borough = (
    trees_grouped_borough.pivot(index=["borough"], columns="year", values="tree_count")
    .reset_index()
)
trees_grouped_borough["trees_diff"] = trees_grouped_borough[2015] - trees_grouped_borough[2005]

trees_grouped_borough = trees_grouped_borough.rename(columns={"nta": "NTACode"})

trees_grouped_borough.to_csv("final-app/trees_grouped_borough.csv", index=False)

# borough shape file
borough_shapes = gpd.read_file("data/shapefiles/geo_export_efd6f6d8-cbf0-4c24-b4ee-a228765d4622.shp")
borough_shapes.plot()

# make sure column names match for merge
trees_grouped_borough = trees_grouped_borough.rename(columns={"borough": "boro_name"})

# merge data frames together
merged_borough_map = borough_shapes.merge(trees_grouped_borough, how='left', on='boro_name' )
merged_borough_map = merged_borough_map.rename(columns={2005: '2005', 2015: '2015'})
```

### 2005
```{python}
# make 2005 choropleth
ax = merged_borough_map.plot(column='2005', cmap='Greens',
                             linewidth=0.1, edgecolor='0.8', legend=True)

plt.title("Number of Trees by Borough in New York City - 2005 Tree Census", fontsize=15)
for idx, row in merged_borough_map.iterrows():
    borough_name = row['boro_name']
    centroid = row['geometry'].centroid
    plt.annotate(borough_name, xy=(centroid.x, centroid.y),
                 xytext=(3, 3), textcoords='offset points',
                 fontsize=8, color='black', ha='center')

plt.axis("off")
plt.show()
```

### 2015
```{python}
# make 2015 choropleth
ax = merged_borough_map.plot(column='2015', cmap='Greens',
                             linewidth=0.1, edgecolor='0.8', legend=True)

plt.title("Number of Trees by Borough in New York City - 2015 Tree Census", fontsize=15)
for idx, row in merged_borough_map.iterrows():
    borough_name = row['boro_name']
    centroid = row['geometry'].centroid
    plt.annotate(borough_name, xy=(centroid.x, centroid.y),
                 xytext=(3, 3), textcoords='offset points',
                 fontsize=8, color='black', ha='center')

plt.axis("off")
plt.show()
```

### Plot showing difference in tree count between 2005 and 2015
```{python}
ax = merged_borough_map.plot(column='trees_diff', cmap='Reds',
                             linewidth=0.1, edgecolor='0.8', legend=True)

plt.title("Increase in Tree Count from 2005 to 2015 by Borough", fontsize=15)
for idx, row in merged_borough_map.iterrows():
    borough_name = row['boro_name']
    centroid = row['geometry'].centroid
    plt.annotate(borough_name, xy=(centroid.x, centroid.y),
                 xytext=(3, 3), textcoords='offset points',
                 fontsize=8, color='black', ha='center')

plt.axis("off")
plt.show()
```

## Air quality over time (Jennifer )

```{python}
# Filter the data to only include rows where "Geo Type Name" is "Borough"
borough_data = filtered_air_quality_only_NO2[
    filtered_air_quality_only_NO2['Geo Type Name'] == 'Borough'
]

# Define a new column for the decade group with simpler labels
borough_data['Decade'] = borough_data['Year'].apply(
    lambda x: "2000s" if 2008 <= x <= 2009 else "2010s" if 2010 <= x <= 2019 else None
)

# Filter out rows that are not in the defined periods
borough_data = borough_data.dropna(subset=['Decade'])

# Group by borough and decade, then compute the average NO2 level
borough_decade_avg = (
    borough_data.groupby(['Decade', 'Geo Place Name'])['Data Value'].mean().reset_index()
)

grouped_bar_chart = alt.Chart(borough_decade_avg).mark_bar().encode(
    x=alt.X('Decade:O', title='Decade', axis=alt.Axis(labelAngle=0)), 
    y=alt.Y('Data Value:Q', title='Average Nitrogen Dioxide Level (ppb)'),
    color=alt.Color('Geo Place Name:N', legend=None),  
    column=alt.Column('Geo Place Name:N', title='Borough')
).properties(
    title='Average Nitrogen Dioxide (NO2) Levels by Borough and Decade',
    width=120,
    height=200
)

grouped_bar_chart
```

```{python}
# Reading in the borough shapely file
borough_shapes = gpd.read_file(r"data\shapefiles\geo_export_efd6f6d8-cbf0-4c24-b4ee-a228765d4622.shp")
print(borough_shapes.head())
```

```{python}
reshaped_data = borough_decade_avg.pivot(
    index='Geo Place Name', 
    columns='Decade',       
    values='Data Value'    
).reset_index()

reshaped_data.columns.name = None  
reshaped_data = reshaped_data.rename(columns={
    '2000s': '2000s Air Quality',
    '2010s': '2010s Air Quality'
})

reshaped_data["Percentage Change"] = (
    (reshaped_data["2010s Air Quality"] - reshaped_data["2000s Air Quality"]) /
    reshaped_data["2000s Air Quality"]
) * 100

# Checking
print(reshaped_data)
```

```{python}

merged_borough_air_quality = borough_shapes.merge(
    reshaped_data, 
    left_on='boro_name', 
    right_on='Geo Place Name' 
)

fig, ax = plt.subplots(1, 1, figsize=(10, 8))

merged_borough_air_quality.plot(
    column='Percentage Change',  
    cmap='Blues_r',              
    legend=True,                 
    edgecolor='black',       
    ax=ax                        
)

for idx, row in merged_borough_air_quality.iterrows():
    ax.text(
        row.geometry.centroid.x, 
        row.geometry.centroid.y, 
        row['Geo Place Name'],   
        fontsize=9,              
        ha='center',            
        color='black'         
    )

ax.set_title('Percentage Change in Air Quality by Borough (2000s to 2010s)', fontsize=14)

plt.axis('off')  
plt.show()
```


## Dynamic plot (Shiny App)

- input year and neighborhood
- bar chart comparing air quality in 2005 and 2015
- tree count in each year 